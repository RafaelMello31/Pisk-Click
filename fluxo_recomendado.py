#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Fluxo Recomendado para o Pisck & Click

Este script demonstra o fluxo ideal de uso do sistema:
1. Executar calibra√ß√£o
2. Verificar/ajustar configura√ß√µes via GUI
3. Iniciar programa principal

Este fluxo garante que todas as configura√ß√µes estejam otimizadas
antes da execu√ß√£o principal do sistema.
"""

import os
import sys
import subprocess
import time
import logging
from pathlib import Path

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class FluxoRecomendado:
    """Gerencia o fluxo recomendado de execu√ß√£o do Pisck & Click."""
    
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.calibration_module = self.base_dir / "calibration_module.py"
        self.config_gui = self.base_dir / "config_gui.py"
        self.main_module = self.base_dir / "main.py"
        
    def verificar_arquivos(self):
        """Verifica se todos os arquivos necess√°rios existem."""
        arquivos = {
            "M√≥dulo de Calibra√ß√£o": self.calibration_module,
            "Interface de Configura√ß√£o": self.config_gui,
            "Programa Principal": self.main_module
        }
        
        arquivos_faltando = []
        for nome, arquivo in arquivos.items():
            if not arquivo.exists():
                arquivos_faltando.append(f"{nome}: {arquivo}")
                
        if arquivos_faltando:
            logger.error("Arquivos n√£o encontrados:")
            for arquivo in arquivos_faltando:
                logger.error(f"  - {arquivo}")
            return False
            
        logger.info("‚úÖ Todos os arquivos necess√°rios foram encontrados")
        return True
    
    def executar_calibracao(self):
        """Executa o m√≥dulo de calibra√ß√£o."""
        print("\n" + "="*60)
        print("üéØ ETAPA 1: CALIBRA√á√ÉO")
        print("="*60)
        print("üìπ Iniciando processo de calibra√ß√£o...")
        print("   ‚Ä¢ A janela de calibra√ß√£o ser√° aberta")
        print("   ‚Ä¢ Siga as instru√ß√µes na tela")
        print("   ‚Ä¢ O limiar EAR ser√° calculado automaticamente")
        print("\n‚ö†Ô∏è  IMPORTANTE: Mantenha-se em frente √† c√¢mera durante todo o processo")
        
        input("\nüîÑ Pressione ENTER para iniciar a calibra√ß√£o...")
        
        try:
            # Executar calibra√ß√£o
            resultado = subprocess.run(
                [sys.executable, str(self.calibration_module)],
                cwd=self.base_dir,
                capture_output=False,  # Permite ver a sa√≠da em tempo real
                text=True
            )
            
            if resultado.returncode == 0:
                print("\n‚úÖ Calibra√ß√£o conclu√≠da com sucesso!")
                print("üìä Configura√ß√µes salvas automaticamente")
                return True
            else:
                print(f"\n‚ùå Erro durante calibra√ß√£o (c√≥digo: {resultado.returncode})")
                return False
                
        except Exception as e:
            logger.error(f"Erro ao executar calibra√ß√£o: {e}")
            return False
    
    def abrir_config_gui(self):
        """Abre a interface gr√°fica de configura√ß√£o."""
        print("\n" + "="*60)
        print("‚öôÔ∏è  ETAPA 2: VERIFICA√á√ÉO DE CONFIGURA√á√ïES")
        print("="*60)
        print("üñ•Ô∏è  Abrindo interface de configura√ß√£o...")
        print("   ‚Ä¢ Verifique se os valores est√£o corretos")
        print("   ‚Ä¢ Ajuste configura√ß√µes se necess√°rio")
        print("   ‚Ä¢ Salve as altera√ß√µes antes de fechar")
        print("\nüí° DICA: O limiar EAR foi calculado automaticamente na calibra√ß√£o")
        
        input("\nüîÑ Pressione ENTER para abrir a interface de configura√ß√£o...")
        
        try:
            # Executar GUI de configura√ß√£o
            processo = subprocess.Popen(
                [sys.executable, str(self.config_gui)],
                cwd=self.base_dir
            )
            
            print("\nüñºÔ∏è  Interface de configura√ß√£o aberta!")
            print("üìù Aguardando voc√™ finalizar as configura√ß√µes...")
            print("\n‚ö†Ô∏è  FECHE a janela de configura√ß√£o quando terminar")
            
            # Aguardar o processo terminar
            processo.wait()
            
            print("\n‚úÖ Configura√ß√µes finalizadas!")
            return True
            
        except Exception as e:
            logger.error(f"Erro ao abrir interface de configura√ß√£o: {e}")
            return False
    
    def executar_programa_principal(self):
        """Executa o programa principal."""
        print("\n" + "="*60)
        print("üöÄ ETAPA 3: EXECU√á√ÉO PRINCIPAL")
        print("="*60)
        print("üéÆ Iniciando Pisck & Click...")
        print("   ‚Ä¢ Sistema calibrado e configurado")
        print("   ‚Ä¢ Controle por movimento facial ativo")
        print("   ‚Ä¢ Clique por piscada habilitado")
        print("\nüéØ Sistema pronto para uso!")
        
        input("\nüîÑ Pressione ENTER para iniciar o programa principal...")
        
        try:
            # Executar programa principal
            subprocess.run(
                [sys.executable, str(self.main_module)],
                cwd=self.base_dir
            )
            
            print("\n‚úÖ Execu√ß√£o finalizada!")
            return True
            
        except Exception as e:
            logger.error(f"Erro ao executar programa principal: {e}")
            return False
    
    def executar_fluxo_completo(self):
        """Executa o fluxo completo recomendado."""
        print("üé® PISCK & CLICK - FLUXO RECOMENDADO")
        print("="*60)
        print("üìã Este script ir√° gui√°-lo atrav√©s do processo completo:")
        print("   1Ô∏è‚É£  Calibra√ß√£o do sistema")
        print("   2Ô∏è‚É£  Verifica√ß√£o de configura√ß√µes")
        print("   3Ô∏è‚É£  Execu√ß√£o do programa principal")
        print("\nüéØ Isso garante a melhor experi√™ncia de uso!")
        
        if not self.verificar_arquivos():
            print("\n‚ùå N√£o √© poss√≠vel continuar sem todos os arquivos")
            return False
        
        # Etapa 1: Calibra√ß√£o
        if not self.executar_calibracao():
            print("\n‚ùå Falha na calibra√ß√£o. Fluxo interrompido.")
            return False
        
        # Pequena pausa entre etapas
        time.sleep(2)
        
        # Etapa 2: Configura√ß√£o
        if not self.abrir_config_gui():
            print("\n‚ùå Falha na configura√ß√£o. Fluxo interrompido.")
            return False
        
        # Pequena pausa entre etapas
        time.sleep(2)
        
        # Etapa 3: Execu√ß√£o principal
        if not self.executar_programa_principal():
            print("\n‚ùå Falha na execu√ß√£o principal.")
            return False
        
        print("\n" + "="*60)
        print("üéâ FLUXO COMPLETO FINALIZADO COM SUCESSO!")
        print("="*60)
        print("‚úÖ Calibra√ß√£o realizada")
        print("‚úÖ Configura√ß√µes verificadas")
        print("‚úÖ Sistema executado")
        print("\nüéØ Pisck & Click est√° pronto para uso otimizado!")
        
        return True

def main():
    """Fun√ß√£o principal."""
    try:
        fluxo = FluxoRecomendado()
        sucesso = fluxo.executar_fluxo_completo()
        
        if sucesso:
            print("\nüèÅ Processo conclu√≠do com sucesso!")
        else:
            print("\n‚ö†Ô∏è  Processo interrompido ou com falhas")
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Processo interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"Erro inesperado: {e}")
        print(f"\n‚ùå Erro inesperado: {e}")
    
    input("\nüîÑ Pressione ENTER para sair...")

if __name__ == "__main__":
    main()